
//////////////////////////////// test1_pipe ////////////////////////////
// Reference for 1.txt

//opq , halt along with irmovq 

//irmovq $0x100, %rbx
instr_mem[0]=8'b00110000;
instr_mem[1]=8'b11110011;
instr_mem[2]=8'b00000000;
instr_mem[3]=8'b00000001;
instr_mem[4]=8'b00000000;
instr_mem[5]=8'b00000000;
instr_mem[6]=8'b00000000;
instr_mem[7]=8'b00000000;
instr_mem[8]=8'b00000000;
instr_mem[9]=8'b00000000;

//irmovq $0x200, %dx
instr_mem[10]=8'b00110000;
instr_mem[11]=8'b11110010;
instr_mem[12]=8'b00000000;
instr_mem[13]=8'b00000010;
instr_mem[14]=8'b00000000;
instr_mem[15]=8'b00000000;
instr_mem[16]=8'b00000000;
instr_mem[17]=8'b00000000;
instr_mem[18]=8'b00000000;
instr_mem[19]=8'b00000000;

//addq %rdx, %rbx
instr_mem[20]=8'b01100000;
instr_mem[21]=8'b00100011;

//halt
instr_mem[22]=8'b00000000;


//////////////////////////////// test2_pipe ////////////////////////////
//rrmovq , rmmovq , nop , halt along with opq

// //opq add
instr_mem[0] = 8'b01100000;

//%rax = 1 %rbx = 3
instr_mem[1] = 8'b00010011; 
// rrmovq 
instr_mem[2] = 8'b00100000;
instr_mem[3] = 8'b00010011; 
// src = %rax dest = %rbx

//rmmovq 
instr_mem[4] = 8'b01000000; 
//rax and (rbx)
instr_mem[5] = 8'b00010011;
//VALC
instr_mem[6] = 8'b00001111;  
instr_mem[7] = 8'b00000000;
instr_mem[8] = 8'b00000000;
instr_mem[9] = 8'b00000000;
instr_mem[10] = 8'b00000000;
instr_mem[11] = 8'b00000000;
instr_mem[12] = 8'b00000000;
instr_mem[13] = 8'b00000000;

//no operation
instr_mem[14] = 8'b00010000; 

// //halt
// instr_mem[15] = 8'b00000000; 

//////////////////////////////// test3_pipe ////////////////////////////

//jump, halt along with irmovq 

//irmovq $0xc, %rbx
//3 0
  instr_mem[0]=8'b00110000; 
  //F rB=3
  instr_mem[1]=8'b00000011; 
  instr_mem[2]=8'b00000000;           
  instr_mem[3]=8'b00000000;           
  instr_mem[4]=8'b00000000;           
  instr_mem[5]=8'b00000000;           
  instr_mem[6]=8'b00000000;           
  instr_mem[7]=8'b00000000;           
  instr_mem[8]=8'b00000000;          
  instr_mem[9]=8'b00001100; 
// Val=12

  //jmp :find
   //7 jxx
  instr_mem[10]=8'b01110000;
  instr_mem[11]=8'b00000000; 
  instr_mem[12]=8'b00000000; 
  instr_mem[13]=8'b00000000; 
  instr_mem[14]=8'b00000000; 
  instr_mem[15]=8'b00000000; 
  instr_mem[16]=8'b00000000; 
  instr_mem[17]=8'b00000000; 
  instr_mem[18]=8'b00010011; 
  
  // find:
  // opq //6 add
  instr_mem[19]=8'b01100000; 
  //rA=0 rB=3
  instr_mem[20]=8'b00000011; 
  instr_mem[21]=8'b00000000;

  //////////////////////////////// test4_pipe ////////////////////////////
  
//opq , halt along with irmovq 

//irmovq $0b11, %rbx
instr_mem[0]=8'b00110000;
instr_mem[1]=8'b11110011;
instr_mem[2]=8'b00000000;
instr_mem[3]=8'b00000000;
instr_mem[4]=8'b00000000;
instr_mem[5]=8'b00000000;
instr_mem[6]=8'b00000000;
instr_mem[7]=8'b00000000;
instr_mem[8]=8'b00000000;
instr_mem[9]=8'b000000011;

//irmovq $0b10, %dx
instr_mem[10]=8'b00110000;
instr_mem[11]=8'b11110010;
instr_mem[12]=8'b00000000;
instr_mem[13]=8'b00000000;
instr_mem[14]=8'b00000000;
instr_mem[15]=8'b00000000;
instr_mem[16]=8'b00000000;
instr_mem[17]=8'b00000000;
instr_mem[18]=8'b00000000;
instr_mem[19]=8'b00000010;

//addq %rdx, %rbx
instr_mem[20]=8'b01100001;
instr_mem[21]=8'b00100011;

//halt
instr_mem[22]=8'b00000000;

//////////////////////////////// test5_pipe ////////////////////////////
  
//cmovxx , halt along with irmovq and opq

//addq %rdx, %rbx
instr_mem[0]=8'b00110000;
instr_mem[1]=8'b11110011;
instr_mem[2]=8'b00000000;
instr_mem[3]=8'b00000000;
instr_mem[4]=8'b00000000;
instr_mem[5]=8'b00000000;
instr_mem[6]=8'b00000000;
instr_mem[7]=8'b00000000;
instr_mem[8]=8'b00000101;
instr_mem[9]=8'b00001000;
instr_mem[10]=8'b00110000;
instr_mem[11]=8'b11110010;
instr_mem[12]=8'b00000000;
instr_mem[13]=8'b00000000;
instr_mem[14]=8'b00000000;
instr_mem[15]=8'b00000000;
instr_mem[16]=8'b00000000;
instr_mem[17]=8'b00000000;
instr_mem[18]=8'b00000000;
instr_mem[19]=8'b00000001;

instr_mem[20]=8'b01100000;
instr_mem[21]=8'b00100011;

instr_mem[22] = 8'b00010000;

//cmov
// 2 fn
instr_mem[23]=8'b00100000; 
// rA rB
instr_mem[24]=8'b00110100; 

//halt
instr_mem[25] = 8'b00000000; 

//////////////////////////////// test6_pipe ////////////////////////////

 //opq , halt along with irmovq 

instr_mem[0]=8'b00110000;
instr_mem[1]=8'b11110011;
instr_mem[2]=8'b00000000;
instr_mem[3]=8'b00000000;
instr_mem[4]=8'b00000000;
instr_mem[5]=8'b00000000;
instr_mem[6]=8'b00000000;
instr_mem[7]=8'b00000000;
instr_mem[8]=8'b00000000;
instr_mem[9]=8'b00000100;
instr_mem[10]=8'b00110000;
instr_mem[11]=8'b11110010;
instr_mem[12]=8'b00000000;
instr_mem[13]=8'b00000000;
instr_mem[14]=8'b00000000;
instr_mem[15]=8'b00000000;
instr_mem[16]=8'b00000000;
instr_mem[17]=8'b00000000;
instr_mem[18]=8'b00000110;
instr_mem[19]=8'b00000000;
instr_mem[20]=8'b01100010;
instr_mem[21]=8'b00100011;
instr_mem[22]=8'b00000000;

/////////////////////////////// test7_pipe ///////////////////////////////////////////
//push, pop, halt along with irmovq

// irmovq $0x10 %rax
    instr_mem[0]=8'h30; //3 0
    instr_mem[1]=8'b11110000; //F rA=0
    instr_mem[2]=8'h00;           
    instr_mem[3]=8'h00;           
    instr_mem[4]=8'h00;           
    instr_mem[5]=8'h00;           
    instr_mem[6]=8'h00;           
    instr_mem[7]=8'h00;           
    instr_mem[8]=8'h00;          
    instr_mem[9]=8'h10; //V=16
// irmovq $0xc %rbx
    instr_mem[10]=8'h30; //3 0
    instr_mem[11]=8'hF3; //F rB=3
    instr_mem[12]=8'h00;           
    instr_mem[13]=8'h00;           
    instr_mem[14]=8'h00;           
    instr_mem[15]=8'h00;           
    instr_mem[16]=8'h00;           
    instr_mem[17]=8'h00;           
    instr_mem[18]=8'h00;          
    instr_mem[19]=8'h0c; //V=12

// irmovq $0xc %rsp
    instr_mem[20]=8'h30; //3 0
    instr_mem[21]=8'hF4; //F rsp=4
    instr_mem[22]=8'h00;           
    instr_mem[23]=8'h00;           
    instr_mem[24]=8'h00;           
    instr_mem[25]=8'h00;           
    instr_mem[26]=8'h00;           
    instr_mem[27]=8'h00;           
    instr_mem[28]=8'h00;          
    instr_mem[29]=8'h0c; //V=12
// Example: pushq %rdi (rA=6, rB=0, V=0)
    instr_mem[30] = 8'b10100000; // call push
    instr_mem[31] = 8'b0010011; // rA=6, rB=0

// Example: popq %rdx (rA=0, rB=0, V=0)
    instr_mem[32] = 8'b10110000; // call pop
    instr_mem[33] = 8'b00100000; // rA=0, rB=0

    instr_mem[34] = 8'b00000000; // halt

/////////////////////////////// test8_pipe ///////////////////////////////////////////
//irmovq, mrmovq, opq along with halt
 // irmovq $0xc %rbx
    instr_mem[0]=8'h30; //3 0
    instr_mem[1]=8'hF3; //F rB=3
    instr_mem[2]=8'h00;           
    instr_mem[3]=8'h00;           
    instr_mem[4]=8'h00;           
    instr_mem[5]=8'h00;           
    instr_mem[6]=8'h00;           
    instr_mem[7]=8'h00;           
    instr_mem[8]=8'h00;          
    instr_mem[9]=8'h0c; //V=12
//irmovq $0x10 %rax
    instr_mem[10]=8'h30; //3 0
    instr_mem[11]=8'b11110010; //F rA=0
    instr_mem[12]=8'h00;           
    instr_mem[13]=8'h00;           
    instr_mem[14]=8'h00;           
    instr_mem[15]=8'h00;           
    instr_mem[16]=8'h00;           
    instr_mem[17]=8'h00;           
    instr_mem[18]=8'h00;          
    instr_mem[19]=8'h10; //V=16
//mrmovq
    instr_mem[20]=8'b01010000; //5 0
    instr_mem[21]=8'b00000011  ; //rA rB
    instr_mem[22]=8'b00000000; //D
    instr_mem[23]=8'b00000000; //D
    instr_mem[24]=8'b00000000; //D
    instr_mem[25]=8'b00000000; //D
    instr_mem[26]=8'b00000000; //D
    instr_mem[27]=8'b00000000; //D
    instr_mem[28]=8'b00000000; //D
    instr_mem[29]=8'b00000001; //D

   //OPq
    instr_mem[30]=8'b01100000; //6 fn
    instr_mem[31]=8'b00100011; //rA rB

    //halt
    instr_mem[32]=8'b00000000;
 
//////////////////////////// test9_pipe /////////////////////////
//call, return, rrmovq along with conditional and unconditional jumps

// call fun
    instr_mem[0]=8'h80; // 8 0
    instr_mem[1]=8'h00;
    instr_mem[2]=8'h00;
    instr_mem[3]=8'h00;
    instr_mem[4]=8'h00;
    instr_mem[5]=8'h00;
    instr_mem[6]=8'h00;
    instr_mem[7]=8'h00;
    instr_mem[8]=8'h0a;
// ret
    instr_mem[9]=8'h90; // 9 0

// fun(%rdx,%rbx)
// fun:
//irmovq $0x0, %rax
    instr_mem[10]=8'b00110000; //3 0
    instr_mem[11]=8'b00000000; //F rB=0
    instr_mem[12]=8'b00000000;           
    instr_mem[13]=8'b00000000;           
    instr_mem[14]=8'b00000000;           
    instr_mem[15]=8'b00000000;           
    instr_mem[16]=8'b00000000;           
    instr_mem[17]=8'b00000000;           
    instr_mem[18]=8'b00000000;          
    instr_mem[19]=8'b00000000; //V=0
// irmovq $0x10 %rdx
    instr_mem[20]=8'h30; //3 0
    instr_mem[21]=8'hF2; //F rB=2
    instr_mem[22]=8'h00;           
    instr_mem[23]=8'h00;           
    instr_mem[24]=8'h00;           
    instr_mem[25]=8'h00;           
    instr_mem[26]=8'h00;           
    instr_mem[27]=8'h00;           
    instr_mem[28]=8'h00;          
    instr_mem[29]=8'h10; //V=16

    //jmp t1
    instr_mem[30]=8'b01110000; //7 fn
    instr_mem[31]=8'b00000000; //Dest
    instr_mem[32]=8'b00000000; //Dest
    instr_mem[33]=8'b00000000; //Dest
    instr_mem[34]=8'b00000000; //Dest
    instr_mem[35]=8'b00000000; //Dest
    instr_mem[36]=8'b00000000; //Dest
    instr_mem[37]=8'b00000000; //Dest
    instr_mem[38]=8'h27; //Dest=39

    // t1:
    // addq %rax, %rbx 
    instr_mem[39]=8'b01100000; //5 fn
    instr_mem[40]=8'b00000011; //rA=0 rB=3
    // je t2 
    instr_mem[41]=8'b01110011; //7 fn=3
    instr_mem[42]=8'b00000000; //Dest
    instr_mem[43]=8'b00000000; //Dest
    instr_mem[44]=8'b00000000; //Dest
    instr_mem[45]=8'b00000000; //Dest
    instr_mem[46]=8'b00000000; //Dest
    instr_mem[47]=8'b00000000; //Dest
    instr_mem[48]=8'b00000000; //Dest
    instr_mem[49]=8'h33; //Dest=51
   
    //halting
    instr_mem[50]=8'b00000000;
    // t2:
    // rrmovq %rdx, %rcx
    instr_mem[51]=8'b00100000; //2 fn=0
    instr_mem[52]=8'b00100001; //rA=2 rB=1
    // ret
    instr_mem[53]=8'h90; // 9 0


